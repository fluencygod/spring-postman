buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'java'
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id 'org.springframework.boot' version '2.1.2.RELEASE'
    id 'com.benjaminsproule.swagger' version '1.0.6'
    id "com.moowork.node" version "1.3.1"
}

group 'com.csieflyman'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8
[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

jar {
    version = '1.0-SNAPSHOT'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':library')

    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-json")
    
    implementation group: 'org.flywaydb', name: 'flyway-core', version: '5.2.4'
    implementation group: 'com.h2database', name: 'h2', version: '1.4.199'
    
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-hibernate5', version: '2.9.7'
    implementation group: 'com.vladmihalcea', name: 'hibernate-types-52', version: '2.4.3'
    
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.2'
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation group: 'com.google.guava', name: 'guava', version: '27.0.1-jre'

    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
    implementation group: 'io.springfox', name: 'springfox-bean-validators', version: '2.9.2'

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
}

dependencyManagement {
    imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
}

swagger {
    apiSource {
        springmvc = true
        attachSwaggerArtifact = true
        locations = ['example.controller']
        swaggerDirectory = "${project.projectDir}/apidoc"
        schemes = ['http']
        host = 'localhost:8080'
        basePath = '/'
        info {
            title = 'Example API'
            version = '1.0'
            description = 'This is Example API'
        }
        outputFormats = ["yaml"]
    }
}

node {
    /* gradle-node-plugin configuration
       https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md
       Task name pattern:
       ./gradlew npm_<command> Executes an NPM command.
    */
    // Version of node to use.
    version = '10.15.3'
    // Version of npm to use.
    npmVersion = '6.4.1'

    // Version of Yarn to use.
    yarnVersion = '1.16.0'

    // Base URL for fetching node distributions (change if you have a mirror).
    distBaseUrl = 'https://nodejs.org/dist'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory for unpacking node
    workDir = file("${project.buildDir}/nodejs")

    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/npm")

    // Set the work directory for Yarn
    yarnWorkDir = file("${project.buildDir}/yarn")

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}")
}
task wrapper(type: Wrapper) {
    gradleVersion = '7.0'
}
task myNpmInstall(type: NpmTask) {
    args = ['install', 'request', 'async', 'openapi-to-postmanv2', 'newman', 'newman-reporter-html', '--save-dev']
}

task swaggerToPostmanCollection(type: NodeTask) {
    script = file('nodejs/swaggerToPostmanCollection.js')
}

task generatePostmanCollection(type: GradleBuild) {
    tasks = ['generateSwaggerDocumentation', 'swaggerToPostmanCollection']
}

task newman(type: NodeTask) {
    script = file('nodejs/newman.js')
    args = ['localhost'] // envName(required), folderName(optional)
}

task uploadToPostmanServer(type: NodeTask) {
    environment "X-Api-Key": System.getenv("POSTMAN_API_KEY"), "uploadEnv": "true", "uploadCollection": "true"
    script = file('nodejs/postmanApi.js')
}
task prepareKotlinBuildScriptModel {

}